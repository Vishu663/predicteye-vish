{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/constants.ts"],"sourcesContent":["export const FURNITURE_SERVICE = {\n  name: \"Furniture Resale Prediction\",\n  description: \"Get an accurate resale prediction for your furniture items\",\n  icon: \"ü™ë\",\n  questionnaire: [\n    {\n      name: \"photo\",\n      label: \"Upload a photo of the furniture\",\n      type: \"file\",\n      required: true,\n    },\n    {\n      name: \"itemType\",\n      label: \"What type of furniture is it?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\n        \"Chair\",\n        \"Table\",\n        \"Sofa\",\n        \"Bed\",\n        \"Dresser\",\n        \"Desk\",\n        \"Bookshelf\",\n        \"Cabinet\",\n        \"Other\",\n      ],\n    },\n    {\n      name: \"material\",\n      label: \"What is the primary material?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\n        \"Wood\",\n        \"Metal\",\n        \"Glass\",\n        \"Plastic\",\n        \"Leather\",\n        \"Fabric\",\n        \"Stone\",\n        \"Composite\",\n        \"Other\",\n      ],\n    },\n    {\n      name: \"age\",\n      label: \"When was the item purchased?\",\n      type: \"date\", // Changed to date for specificity\n      required: true,\n    },\n    {\n      name: \"condition\",\n      label: \"What condition is the item in?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\n        \"Brand New\",\n        \"Excellent\",\n        \"Good\",\n        \"Fair\",\n        \"Poor\",\n        \"Needs Restoration\",\n      ],\n    },\n    {\n      name: \"brand\",\n      label: \"What is the brand or manufacturer (if known)?\",\n      type: \"text\",\n      required: false,\n    },\n    {\n      name: \"original_price\",\n      label: \"Original Purchase Price ($)\",\n      type: \"number\",\n      required: true,\n    },\n    {\n      name: \"planned_resale_year\",\n      label: \"In which year are you planning to sell this item?\",\n      type: \"dropdown\", // Added a new question for planned resale year\n      required: true,\n      options: [\"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"Later\"],\n    },\n    {\n      name: \"description\",\n      label: \"Please provide any additional details about the item\",\n      type: \"textarea\",\n      required: false,\n    },\n  ],\n};\n\nexport const JEWELRY_SERVICE = {\n  name: \"Jewelry Resale Prediction\",\n  description: \"Get accurate resale value predictions for your jewelry items\",\n  icon: \"üíç\",\n  questionnaire: [\n    {\n      name: \"photo\",\n      label: \"Upload a photo of the jewelry\",\n      type: \"file\",\n      required: true,\n    },\n    {\n      name: \"jewelry_type\",\n      label: \"What type of jewelry is it?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\"Ring\", \"Necklace\", \"Bracelet\", \"Earrings\", \"Watch\", \"Other\"],\n    },\n    {\n      name: \"brand\",\n      label: \"What is the brand or manufacturer (if known)?\",\n      type: \"text\",\n      required: false,\n    },\n    {\n      name: \"metal_type\",\n      label: \"What is the primary metal type?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\n        \"Gold\",\n        \"Silver\",\n        \"Platinum\",\n        \"White Gold\",\n        \"Rose Gold\",\n        \"Stainless Steel\",\n        \"Other\",\n      ],\n    },\n    {\n      name: \"metal_weight\",\n      label: \"What is the approximate weight of the jewelry (in grams)?\",\n      type: \"number\",\n      required: true,\n    },\n    {\n      name: \"age\",\n      label: \"When was the item purchased?\",\n      type: \"date\",\n      required: true,\n    },\n    {\n      name: \"condition\",\n      label: \"What condition is the item in?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\"Brand New\", \"Excellent\", \"Good\", \"Fair\", \"Poor\"],\n    },\n    {\n      name: \"original_price\",\n      label: \"Original Purchase Price ($)\",\n      type: \"number\",\n      required: true,\n      hint: \"Note: Resale value may depend on the current market price of gold.\",\n    },\n    {\n      name: \"planned_resale_year\",\n      label: \"In which year are you planning to sell this item?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"Later\"],\n    },\n    {\n      name: \"description\",\n      label: \"Please provide any additional details about the item\",\n      type: \"textarea\",\n      required: false,\n    },\n  ],\n};\n\nexport const SERVICES = [FURNITURE_SERVICE, JEWELRY_SERVICE];\n\nexport enum ApplicationEnvironment {\n  DEVELOPMENT = \"development\",\n  PRODUCTION = \"production\",\n}\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,oBAAoB;IAC/B,MAAM;IACN,aAAa;IACb,MAAM;IACN,eAAe;QACb;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBAAC;gBAAQ;gBAAQ;gBAAQ;gBAAQ;gBAAQ;gBAAQ;aAAQ;QACpE;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;KACD;AACH;AAEO,MAAM,kBAAkB;IAC7B,MAAM;IACN,aAAa;IACb,MAAM;IACN,eAAe;QACb;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBAAC;gBAAQ;gBAAY;gBAAY;gBAAY;gBAAS;aAAQ;QACzE;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBAAC;gBAAa;gBAAa;gBAAQ;gBAAQ;aAAO;QAC7D;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,MAAM;QACR;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBAAC;gBAAQ;gBAAQ;gBAAQ;gBAAQ;gBAAQ;gBAAQ;aAAQ;QACpE;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;KACD;AACH;AAEO,MAAM,WAAW;IAAC;IAAmB;CAAgB;;UAEhD;;;GAAA,2BAAA"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/env.ts"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    NODE_ENV: z.enum([\"development\", \"production\"]),\n    NEXTAUTH_SECRET: z.string().min(1),\n    APP_BASE_URL: z.string().url(),\n    MONGODB_URI: z.string().url(),\n    GOOGLE_CLIENT_ID: z.string().min(1),\n    GOOGLE_CLIENT_SECRET: z.string().min(1),\n    GEMINI_API_KEY: z.string().min(1),\n    CLOUDINARY_CLOUD_NAME: z.string().min(1),\n    CLOUDINARY_API_KEY: z.string().min(1),\n    CLOUDINARY_API_SECRET: z.string().min(1),\n    NEXTAUTH_URL: z.string().url(),\n    DATABASE_URL: z.string().url(),\n  },\n  client: {\n    NEXT_PUBLIC_NODE_ENV: z.enum([\"development\", \"production\"]),\n    NEXT_PUBLIC_APP_URL: z.string().url(),\n  },\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,\n    NEXTAUTH_URL: process.env.NEXTAUTH_URL,\n    APP_BASE_URL: process.env.APP_BASE_URL,\n    MONGODB_URI: process.env.MONGODB_URI,\n    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,\n    GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET,\n    GEMINI_API_KEY: process.env.GEMINI_API_KEY,\n    CLOUDINARY_CLOUD_NAME: process.env.CLOUDINARY_CLOUD_NAME,\n    CLOUDINARY_API_KEY: process.env.CLOUDINARY_API_KEY,\n    CLOUDINARY_API_SECRET: process.env.CLOUDINARY_API_SECRET,\n    NEXT_PUBLIC_NODE_ENV: process.env.NEXT_PUBLIC_NODE_ENV,\n    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    DATABASE_URL: process.env.DATABASE_URL,\n  },\n});\n"],"names":[],"mappings":";;;;;;;;AAGO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,UAAU,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;SAAa;QAC9C,iBAAiB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAChC,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,aAAa,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC3B,kBAAkB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACjC,sBAAsB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACrC,gBAAgB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC/B,uBAAuB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtC,oBAAoB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACnC,uBAAuB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtC,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;IAC9B;IACA,QAAQ;QACN,sBAAsB,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;SAAa;QAC1D,qBAAqB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;IACrC;IACA,YAAY;QACV,QAAQ;QACR,iBAAiB,QAAQ,GAAG,CAAC,eAAe;QAC5C,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,aAAa,QAAQ,GAAG,CAAC,WAAW;QACpC,kBAAkB,QAAQ,GAAG,CAAC,gBAAgB;QAC9C,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;QACtD,gBAAgB,QAAQ,GAAG,CAAC,cAAc;QAC1C,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,oBAAoB,QAAQ,GAAG,CAAC,kBAAkB;QAClD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,oBAAoB;QACpB,mBAAmB;QACnB,cAAc,QAAQ,GAAG,CAAC,YAAY;IACxC;AACF"}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/config/logger.ts"],"sourcesContent":["import { blue, green, magenta, red, yellow } from \"colorette\";\nimport * as sourceMapSupport from \"source-map-support\";\nimport util from \"util\";\nimport winston, { format, transports } from \"winston\";\nimport { MongoDB, MongoDBTransportInstance } from \"winston-mongodb\";\nimport { ApplicationEnvironment } from \"../constants\";\nimport { env } from \"../env\";\n\n// Linking Trace Support\nsourceMapSupport.install();\n\nconst colorizeLevel = (level: string) => {\n  switch (level) {\n    case \"ERROR\":\n      return red(level);\n    case \"INFO\":\n      return blue(level);\n    case \"WARN\":\n      return yellow(level);\n    default:\n      return level;\n  }\n};\n\nconst consoleLogFormat = format.printf((info) => {\n  const { level, message, timestamp, meta = {} } = info;\n  const customLevel = colorizeLevel(level.toUpperCase());\n  const customTimestamp = green(timestamp as string);\n  const line = \"----------------\";\n  const customMessage = message;\n  const customMeta = util.inspect(meta, {\n    showHidden: false,\n    depth: null,\n    colors: true,\n  });\n  const customLog = `${line}\\n${customLevel} [${customTimestamp}] ${customMessage}\\n${magenta(\"META\")} ${customMeta}\\n${line}`;\n  return customLog;\n});\n\nconst consoleTransport =\n  (): Array<winston.transports.ConsoleTransportInstance> => {\n    if (env.NODE_ENV === ApplicationEnvironment.DEVELOPMENT) {\n      return [\n        new transports.Console({\n          level: \"info\",\n          format: format.combine(format.timestamp(), consoleLogFormat),\n        }),\n      ];\n    }\n    return [];\n  };\n\nconst getCollectionName = (level: string): string => {\n  switch (level) {\n    case \"info\":\n      return \"app-info\";\n    case \"error\":\n      return \"app-error\";\n    case \"warn\":\n      return \"app-warn\";\n    default:\n      return \"app-logs\";\n  }\n};\n\nconst mongodbTransport = (): Array<MongoDBTransportInstance> => {\n  return [\n    new MongoDB({\n      level: \"info\",\n      db: env.DATABASE_URL,\n      metaKey: \"meta\",\n      expireAfterSeconds: 3600 * 24 * 30,\n      collection: getCollectionName(\"info\"),\n    }),\n    new MongoDB({\n      level: \"error\",\n      db: env.DATABASE_URL,\n      metaKey: \"meta\",\n      expireAfterSeconds: 3600 * 24 * 30,\n      collection: getCollectionName(\"error\"),\n    }),\n    new MongoDB({\n      level: \"warn\",\n      db: env.DATABASE_URL,\n      metaKey: \"meta\",\n      expireAfterSeconds: 3600 * 24 * 30,\n      collection: getCollectionName(\"warn\"),\n    }),\n  ];\n};\n\nconst logger = winston.createLogger({\n  level: \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json(),\n  ),\n  defaultMeta: { service: \"predictye-ai\" },\n  transports: [...consoleTransport(), ...mongodbTransport()],\n});\n\nexport default logger;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAQA,wBAAwB;AACxB,uKAAiB,OAAO;AAExB,MAAM,gBAAgB,CAAC;IACrB,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,oIAAA,CAAA,MAAG,AAAD,EAAE;QACb,KAAK;YACH,OAAO,CAAA,GAAA,oIAAA,CAAA,OAAI,AAAD,EAAE;QACd,KAAK;YACH,OAAO,CAAA,GAAA,oIAAA,CAAA,SAAM,AAAD,EAAE;QAChB;YACE,OAAO;IACX;AACF;AAEA,MAAM,mBAAmB,2IAAA,CAAA,SAAM,CAAC,MAAM,CAAC,CAAC;IACtC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,EAAE,GAAG;IACjD,MAAM,cAAc,cAAc,MAAM,WAAW;IACnD,MAAM,kBAAkB,CAAA,GAAA,oIAAA,CAAA,QAAK,AAAD,EAAE;IAC9B,MAAM,OAAO;IACb,MAAM,gBAAgB;IACtB,MAAM,aAAa,uCAAA,CAAA,UAAI,CAAC,OAAO,CAAC,MAAM;QACpC,YAAY;QACZ,OAAO;QACP,QAAQ;IACV;IACA,MAAM,YAAY,CAAC,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,gBAAgB,EAAE,EAAE,cAAc,EAAE,EAAE,CAAA,GAAA,oIAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,CAAC;IAC5H,OAAO;AACT;AAEA,MAAM,mBACJ;IACE,IAAI,mHAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,yHAAA,CAAA,yBAAsB,CAAC,WAAW,EAAE;QACvD,OAAO;YACL,IAAI,2IAAA,CAAA,aAAU,CAAC,OAAO,CAAC;gBACrB,OAAO;gBACP,QAAQ,2IAAA,CAAA,SAAM,CAAC,OAAO,CAAC,2IAAA,CAAA,SAAM,CAAC,SAAS,IAAI;YAC7C;SACD;IACH;IACA,OAAO,EAAE;AACX;AAEF,MAAM,oBAAoB,CAAC;IACzB,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAEA,MAAM,mBAAmB;IACvB,OAAO;QACL,IAAI,iKAAA,CAAA,UAAO,CAAC;YACV,OAAO;YACP,IAAI,mHAAA,CAAA,MAAG,CAAC,YAAY;YACpB,SAAS;YACT,oBAAoB,OAAO,KAAK;YAChC,YAAY,kBAAkB;QAChC;QACA,IAAI,iKAAA,CAAA,UAAO,CAAC;YACV,OAAO;YACP,IAAI,mHAAA,CAAA,MAAG,CAAC,YAAY;YACpB,SAAS;YACT,oBAAoB,OAAO,KAAK;YAChC,YAAY,kBAAkB;QAChC;QACA,IAAI,iKAAA,CAAA,UAAO,CAAC;YACV,OAAO;YACP,IAAI,mHAAA,CAAA,MAAG,CAAC,YAAY;YACpB,SAAS;YACT,oBAAoB,OAAO,KAAK;YAChC,YAAY,kBAAkB;QAChC;KACD;AACH;AAEA,MAAM,SAAS,2IAAA,CAAA,UAAO,CAAC,YAAY,CAAC;IAClC,OAAO;IACP,QAAQ,2IAAA,CAAA,UAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,2IAAA,CAAA,UAAO,CAAC,MAAM,CAAC,SAAS,IACxB,2IAAA,CAAA,UAAO,CAAC,MAAM,CAAC,IAAI;IAErB,aAAa;QAAE,SAAS;IAAe;IACvC,YAAY;WAAI;WAAuB;KAAmB;AAC5D;uCAEe"}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/config/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,SAAS,IAAI,uDAAA,CAAA,eAAY;uCAEhB"}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/helpers/auth-options.ts"],"sourcesContent":["import { AuthProvider } from \"@prisma/client\";\nimport bcrypt from \"bcryptjs\";\nimport type { AuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport prisma from \"../config/prisma\";\nimport { env } from \"../env\";\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: env.GOOGLE_CLIENT_ID,\n      clientSecret: env.GOOGLE_CLIENT_SECRET,\n    }),\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email,\n          },\n        });\n\n        if (!user || !user.password) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password,\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60,\n  },\n  callbacks: {\n    async jwt({ token, user, account }) {\n      if (user) {\n        // Find the user in the database\n        let dbUser = await prisma.user.findUnique({\n          where: {\n            email: user.email as string,\n          },\n        });\n\n        if (!dbUser) {\n          // Create a new user if it doesn't exist\n          dbUser = await prisma.user.create({\n            data: {\n              email: user.email as string,\n              name: user.name as string,\n              image:\n                (user.image as string) || \"/placeholder.svg?height=50&width=50\",\n              provider:\n                account?.provider === \"google\"\n                  ? AuthProvider.Google\n                  : AuthProvider.Local,\n            },\n          });\n        } else {\n          // Update the provider if the user signs in with a different method\n          const newProvider =\n            account?.provider === \"google\"\n              ? AuthProvider.Google\n              : AuthProvider.Local;\n\n          if (dbUser.provider !== newProvider) {\n            await prisma.user.update({\n              where: { id: dbUser.id },\n              data: { provider: newProvider },\n            });\n          }\n        }\n\n        // Add user details to the token\n        token = { ...token, id: dbUser.id, role: dbUser.role };\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      return {\n        ...session,\n        user: { ...session.user, id: token.id, role: token.role },\n      };\n    },\n  },\n  secret: env.NEXTAUTH_SECRET,\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAQO,MAAM,cAA2B;IACtC,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,mHAAA,CAAA,MAAG,CAAC,gBAAgB;YAC9B,cAAc,mHAAA,CAAA,MAAG,CAAC,oBAAoB;QACxC;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK;IACpB;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,MAAM;gBACR,gCAAgC;gBAChC,IAAI,SAAS,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,KAAK,KAAK;oBACnB;gBACF;gBAEA,IAAI,CAAC,QAAQ;oBACX,wCAAwC;oBACxC,SAAS,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;wBAChC,MAAM;4BACJ,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;4BACf,OACE,AAAC,KAAK,KAAK,IAAe;4BAC5B,UACE,SAAS,aAAa,WAClB,uDAAA,CAAA,eAAY,CAAC,MAAM,GACnB,uDAAA,CAAA,eAAY,CAAC,KAAK;wBAC1B;oBACF;gBACF,OAAO;oBACL,mEAAmE;oBACnE,MAAM,cACJ,SAAS,aAAa,WAClB,uDAAA,CAAA,eAAY,CAAC,MAAM,GACnB,uDAAA,CAAA,eAAY,CAAC,KAAK;oBAExB,IAAI,OAAO,QAAQ,KAAK,aAAa;wBACnC,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;4BACvB,OAAO;gCAAE,IAAI,OAAO,EAAE;4BAAC;4BACvB,MAAM;gCAAE,UAAU;4BAAY;wBAChC;oBACF;gBACF;gBAEA,gCAAgC;gBAChC,QAAQ;oBAAE,GAAG,KAAK;oBAAE,IAAI,OAAO,EAAE;oBAAE,MAAM,OAAO,IAAI;gBAAC;YACvD;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBAAE,GAAG,QAAQ,IAAI;oBAAE,IAAI,MAAM,EAAE;oBAAE,MAAM,MAAM,IAAI;gBAAC;YAC1D;QACF;IACF;IACA,QAAQ,mHAAA,CAAA,MAAG,CAAC,eAAe;AAC7B"}},
    {"offset": {"line": 524, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 529, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/helpers/errors/server.ts"],"sourcesContent":["import logger from \"@/lib/config/logger\";\nimport { ApplicationEnvironment } from \"@/lib/constants\";\nimport { env } from \"@/lib/env\";\nimport { NextResponse } from \"next/server\";\n\nconst ServerSideErrorHandler = (error: unknown): NextResponse => {\n  // Log the error for debugging purposes\n  if (env.NODE_ENV === ApplicationEnvironment.DEVELOPMENT) {\n    console.log(\"Server-side error:\", error);\n  } else {\n    logger.error(error);\n  }\n\n  if (error instanceof Error && error.message.includes(\"prisma\")) {\n    // Handle Prisma-related errors\n    const prismaError = error as any; // Cast to any to access meta fields if available\n    return NextResponse.json(\n      {\n        success: false,\n        message: \"Database Error\",\n        trace:\n          env.NODE_ENV === ApplicationEnvironment.DEVELOPMENT\n            ? prismaError.stack\n            : null,\n      },\n      { status: 400 }, // Bad Request for Prisma errors\n    );\n  }\n\n  if (error instanceof Error) {\n    // Handle other types of Error objects\n    return NextResponse.json(\n      {\n        success: false,\n        message: error.message || \"An unexpected error occurred\",\n      },\n      { status: 500 },\n    );\n  } else if (typeof error === \"string\") {\n    // Handle simple string errors\n    return NextResponse.json(\n      {\n        success: false,\n        message: error,\n      },\n      { status: 500 },\n    );\n  } else {\n    // Fallback for any other types of errors\n    return NextResponse.json(\n      {\n        success: false,\n        message: \"An unexpected error occurred\",\n      },\n      { status: 500 },\n    );\n  }\n};\n\nexport default ServerSideErrorHandler;\n"],"names":[],"mappings":";;;;;;;;;;;;AAKA,MAAM,yBAAyB,CAAC;IAC9B,uCAAuC;IACvC,IAAI,mHAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,yHAAA,CAAA,yBAAsB,CAAC,WAAW,EAAE;QACvD,QAAQ,GAAG,CAAC,sBAAsB;IACpC,OAAO;QACL,gIAAA,CAAA,UAAM,CAAC,KAAK,CAAC;IACf;IAEA,IAAI,iBAAiB,SAAS,MAAM,OAAO,CAAC,QAAQ,CAAC,WAAW;QAC9D,+BAA+B;QAC/B,MAAM,cAAc,OAAc,iDAAiD;QACnF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;YACT,OACE,mHAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,yHAAA,CAAA,yBAAsB,CAAC,WAAW,GAC/C,YAAY,KAAK,GACjB;QACR,GACA;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI,iBAAiB,OAAO;QAC1B,sCAAsC;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS,MAAM,OAAO,IAAI;QAC5B,GACA;YAAE,QAAQ;QAAI;IAElB,OAAO,IAAI,OAAO,UAAU,UAAU;QACpC,8BAA8B;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB,OAAO;QACL,yCAAyC;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;uCAEe"}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/chats/[chatId]/route.ts"],"sourcesContent":["import logger from \"@/lib/config/logger\";\nimport prisma from \"@/lib/config/prisma\";\nimport { authOptions } from \"@/lib/helpers/auth-options\";\nimport ServerSideErrorHandler from \"@/lib/helpers/errors/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { NextResponse } from \"next/server\";\n\nexport async function GET(\n  request: Request,\n  { params }: { params: Promise<{ chatId: string }> },\n) {\n  try {\n    const { chatId } = await params;\n\n    // Get user session\n    const session = await getServerSession(authOptions);\n\n    const userId = session?.user?.id;\n\n    if (!userId) {\n      return NextResponse.json(\n        { success: false, error: \"User not authenticated\" },\n        { status: 401 },\n      );\n    }\n\n    // Fetch chat with blocks\n    const chat = await prisma.chat.findUnique({\n      where: { id: chatId },\n      include: {\n        service: true,\n        blocks: {\n          include: {\n            messages: {\n              include: {\n                fileData: true,\n              },\n            },\n          },\n          orderBy: { createdAt: \"desc\" },\n        },\n      },\n    });\n\n    if (!chat) {\n      logger.error(`Chat not found: ${chatId}`);\n      return NextResponse.json(\n        { success: false, error: \"Chat not found\" },\n        { status: 404 },\n      );\n    }\n\n    // Check if user has access to this chat if chat.userId is defined\n    if (\n      chat.userId &&\n      chat.userId.toString() !== userId &&\n      !session?.user?.id\n    ) {\n      logger.warn(\n        `Unauthorized access attempt to chat: ${chatId} by user: ${userId}`,\n      );\n      return NextResponse.json(\n        { success: false, error: \"Unauthorized\" },\n        { status: 403 },\n      );\n    }\n\n    logger.info(`Chat fetched: ${chatId} by user: ${userId}`);\n\n    return NextResponse.json({\n      success: true,\n      chat,\n    });\n  } catch (error) {\n    return ServerSideErrorHandler(error);\n  }\n}\n\nexport async function PATCH(\n  request: Request,\n  { params }: { params: Promise<{ chatId: string }> },\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    // Check if user is authenticated\n    if (!session?.user) {\n      return NextResponse.json({ message: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { chatId } = await params;\n    const { title } = await request.json();\n\n    // Validate input\n    if (!title || typeof title !== \"string\") {\n      return NextResponse.json({ message: \"Invalid title\" }, { status: 400 });\n    }\n\n    // Find the chat and verify ownership\n    const chat = await prisma.chat.findUnique({\n      where: {\n        id: chatId,\n      },\n      select: {\n        userId: true,\n      },\n    });\n\n    if (!chat) {\n      return NextResponse.json({ message: \"Chat not found\" }, { status: 404 });\n    }\n\n    // Verify the user owns this chat\n    if (chat.userId !== session.user.id) {\n      return NextResponse.json({ message: \"Forbidden\" }, { status: 403 });\n    }\n\n    // Update the chat title\n    const updatedChat = await prisma.chat.update({\n      where: {\n        id: chatId,\n      },\n      data: {\n        title,\n      },\n    });\n\n    return NextResponse.json(updatedChat);\n  } catch (error) {\n    return ServerSideErrorHandler(error);\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 730, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}