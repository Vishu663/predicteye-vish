{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/config/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,SAAS,IAAI,uDAAA,CAAA,eAAY;uCAEhB"}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/env.ts"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    NODE_ENV: z.enum([\"development\", \"production\"]),\n    NEXTAUTH_SECRET: z.string().min(1),\n    APP_BASE_URL: z.string().url(),\n    MONGODB_URI: z.string().url(),\n    GOOGLE_CLIENT_ID: z.string().min(1),\n    GOOGLE_CLIENT_SECRET: z.string().min(1),\n    GEMINI_API_KEY: z.string().min(1),\n    CLOUDINARY_CLOUD_NAME: z.string().min(1),\n    CLOUDINARY_API_KEY: z.string().min(1),\n    CLOUDINARY_API_SECRET: z.string().min(1),\n    NEXTAUTH_URL: z.string().url(),\n    DATABASE_URL: z.string().url(),\n  },\n  client: {\n    NEXT_PUBLIC_NODE_ENV: z.enum([\"development\", \"production\"]),\n    NEXT_PUBLIC_APP_URL: z.string().url(),\n  },\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,\n    NEXTAUTH_URL: process.env.NEXTAUTH_URL,\n    APP_BASE_URL: process.env.APP_BASE_URL,\n    MONGODB_URI: process.env.MONGODB_URI,\n    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,\n    GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET,\n    GEMINI_API_KEY: process.env.GEMINI_API_KEY,\n    CLOUDINARY_CLOUD_NAME: process.env.CLOUDINARY_CLOUD_NAME,\n    CLOUDINARY_API_KEY: process.env.CLOUDINARY_API_KEY,\n    CLOUDINARY_API_SECRET: process.env.CLOUDINARY_API_SECRET,\n    NEXT_PUBLIC_NODE_ENV: process.env.NEXT_PUBLIC_NODE_ENV,\n    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    DATABASE_URL: process.env.DATABASE_URL,\n  },\n});\n"],"names":[],"mappings":";;;;;;;;AAGO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,UAAU,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;SAAa;QAC9C,iBAAiB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAChC,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,aAAa,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC3B,kBAAkB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACjC,sBAAsB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACrC,gBAAgB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC/B,uBAAuB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtC,oBAAoB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACnC,uBAAuB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtC,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;IAC9B;IACA,QAAQ;QACN,sBAAsB,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;SAAa;QAC1D,qBAAqB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;IACrC;IACA,YAAY;QACV,QAAQ;QACR,iBAAiB,QAAQ,GAAG,CAAC,eAAe;QAC5C,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,aAAa,QAAQ,GAAG,CAAC,WAAW;QACpC,kBAAkB,QAAQ,GAAG,CAAC,gBAAgB;QAC9C,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;QACtD,gBAAgB,QAAQ,GAAG,CAAC,cAAc;QAC1C,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,oBAAoB,QAAQ,GAAG,CAAC,kBAAkB;QAClD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,oBAAoB;QACpB,mBAAmB;QACnB,cAAc,QAAQ,GAAG,CAAC,YAAY;IACxC;AACF"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/helpers/auth-options.ts"],"sourcesContent":["import { AuthProvider } from \"@prisma/client\";\nimport bcrypt from \"bcryptjs\";\nimport type { AuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport prisma from \"../config/prisma\";\nimport { env } from \"../env\";\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: env.GOOGLE_CLIENT_ID,\n      clientSecret: env.GOOGLE_CLIENT_SECRET,\n    }),\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email,\n          },\n        });\n\n        if (!user || !user.password) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password,\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60,\n  },\n  callbacks: {\n    async jwt({ token, user, account }) {\n      if (user) {\n        // Find the user in the database\n        let dbUser = await prisma.user.findUnique({\n          where: {\n            email: user.email as string,\n          },\n        });\n\n        if (!dbUser) {\n          // Create a new user if it doesn't exist\n          dbUser = await prisma.user.create({\n            data: {\n              email: user.email as string,\n              name: user.name as string,\n              image:\n                (user.image as string) || \"/placeholder.svg?height=50&width=50\",\n              provider:\n                account?.provider === \"google\"\n                  ? AuthProvider.Google\n                  : AuthProvider.Local,\n            },\n          });\n        } else {\n          // Update the provider if the user signs in with a different method\n          const newProvider =\n            account?.provider === \"google\"\n              ? AuthProvider.Google\n              : AuthProvider.Local;\n\n          if (dbUser.provider !== newProvider) {\n            await prisma.user.update({\n              where: { id: dbUser.id },\n              data: { provider: newProvider },\n            });\n          }\n        }\n\n        // Add user details to the token\n        token = { ...token, id: dbUser.id, role: dbUser.role };\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      return {\n        ...session,\n        user: { ...session.user, id: token.id, role: token.role },\n      };\n    },\n  },\n  secret: env.NEXTAUTH_SECRET,\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAQO,MAAM,cAA2B;IACtC,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,mHAAA,CAAA,MAAG,CAAC,gBAAgB;YAC9B,cAAc,mHAAA,CAAA,MAAG,CAAC,oBAAoB;QACxC;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK;IACpB;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,MAAM;gBACR,gCAAgC;gBAChC,IAAI,SAAS,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,KAAK,KAAK;oBACnB;gBACF;gBAEA,IAAI,CAAC,QAAQ;oBACX,wCAAwC;oBACxC,SAAS,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;wBAChC,MAAM;4BACJ,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;4BACf,OACE,AAAC,KAAK,KAAK,IAAe;4BAC5B,UACE,SAAS,aAAa,WAClB,uDAAA,CAAA,eAAY,CAAC,MAAM,GACnB,uDAAA,CAAA,eAAY,CAAC,KAAK;wBAC1B;oBACF;gBACF,OAAO;oBACL,mEAAmE;oBACnE,MAAM,cACJ,SAAS,aAAa,WAClB,uDAAA,CAAA,eAAY,CAAC,MAAM,GACnB,uDAAA,CAAA,eAAY,CAAC,KAAK;oBAExB,IAAI,OAAO,QAAQ,KAAK,aAAa;wBACnC,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;4BACvB,OAAO;gCAAE,IAAI,OAAO,EAAE;4BAAC;4BACvB,MAAM;gCAAE,UAAU;4BAAY;wBAChC;oBACF;gBACF;gBAEA,gCAAgC;gBAChC,QAAQ;oBAAE,GAAG,KAAK;oBAAE,IAAI,OAAO,EAAE;oBAAE,MAAM,OAAO,IAAI;gBAAC;YACvD;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBAAE,GAAG,QAAQ,IAAI;oBAAE,IAAI,MAAM,EAAE;oBAAE,MAAM,MAAM,IAAI;gBAAC;YAC1D;QACF;IACF;IACA,QAAQ,mHAAA,CAAA,MAAG,CAAC,eAAe;AAC7B"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/auth/[...nextauth]/route.ts"],"sourcesContent":["import { authOptions } from \"@/lib/helpers/auth-options\";\nimport NextAuth, { DefaultSession } from \"next-auth\";\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user?: {\n      id: string;\n    } & DefaultSession[\"user\"];\n  }\n\n  interface User {\n    id: string;\n  }\n}\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;;;;;AAeA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,0IAAA,CAAA,cAAW"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}