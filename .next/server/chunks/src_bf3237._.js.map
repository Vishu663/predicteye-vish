{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/config/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,SAAS,IAAI,uDAAA,CAAA,eAAY;uCAEhB"}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/env.ts"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    NODE_ENV: z.enum([\"development\", \"production\"]),\n    NEXTAUTH_SECRET: z.string().min(1),\n    APP_BASE_URL: z.string().url(),\n    MONGODB_URI: z.string().url(),\n    GOOGLE_CLIENT_ID: z.string().min(1),\n    GOOGLE_CLIENT_SECRET: z.string().min(1),\n    GEMINI_API_KEY: z.string().min(1),\n    CLOUDINARY_CLOUD_NAME: z.string().min(1),\n    CLOUDINARY_API_KEY: z.string().min(1),\n    CLOUDINARY_API_SECRET: z.string().min(1),\n    NEXTAUTH_URL: z.string().url(),\n    DATABASE_URL: z.string().url(),\n  },\n  client: {\n    NEXT_PUBLIC_NODE_ENV: z.enum([\"development\", \"production\"]),\n    NEXT_PUBLIC_APP_URL: z.string().url(),\n  },\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,\n    NEXTAUTH_URL: process.env.NEXTAUTH_URL,\n    APP_BASE_URL: process.env.APP_BASE_URL,\n    MONGODB_URI: process.env.MONGODB_URI,\n    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,\n    GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET,\n    GEMINI_API_KEY: process.env.GEMINI_API_KEY,\n    CLOUDINARY_CLOUD_NAME: process.env.CLOUDINARY_CLOUD_NAME,\n    CLOUDINARY_API_KEY: process.env.CLOUDINARY_API_KEY,\n    CLOUDINARY_API_SECRET: process.env.CLOUDINARY_API_SECRET,\n    NEXT_PUBLIC_NODE_ENV: process.env.NEXT_PUBLIC_NODE_ENV,\n    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    DATABASE_URL: process.env.DATABASE_URL,\n  },\n});\n"],"names":[],"mappings":";;;;;;;;AAGO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,UAAU,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;SAAa;QAC9C,iBAAiB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAChC,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,aAAa,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC3B,kBAAkB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACjC,sBAAsB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACrC,gBAAgB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC/B,uBAAuB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtC,oBAAoB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACnC,uBAAuB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtC,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;IAC9B;IACA,QAAQ;QACN,sBAAsB,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;SAAa;QAC1D,qBAAqB,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;IACrC;IACA,YAAY;QACV,QAAQ;QACR,iBAAiB,QAAQ,GAAG,CAAC,eAAe;QAC5C,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,aAAa,QAAQ,GAAG,CAAC,WAAW;QACpC,kBAAkB,QAAQ,GAAG,CAAC,gBAAgB;QAC9C,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;QACtD,gBAAgB,QAAQ,GAAG,CAAC,cAAc;QAC1C,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,oBAAoB,QAAQ,GAAG,CAAC,kBAAkB;QAClD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,oBAAoB;QACpB,mBAAmB;QACnB,cAAc,QAAQ,GAAG,CAAC,YAAY;IACxC;AACF"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/helpers/auth-options.ts"],"sourcesContent":["import { AuthProvider } from \"@prisma/client\";\nimport bcrypt from \"bcryptjs\";\nimport type { AuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport prisma from \"../config/prisma\";\nimport { env } from \"../env\";\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: env.GOOGLE_CLIENT_ID,\n      clientSecret: env.GOOGLE_CLIENT_SECRET,\n    }),\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email,\n          },\n        });\n\n        if (!user || !user.password) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password,\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60,\n  },\n  callbacks: {\n    async jwt({ token, user, account }) {\n      if (user) {\n        // Find the user in the database\n        let dbUser = await prisma.user.findUnique({\n          where: {\n            email: user.email as string,\n          },\n        });\n\n        if (!dbUser) {\n          // Create a new user if it doesn't exist\n          dbUser = await prisma.user.create({\n            data: {\n              email: user.email as string,\n              name: user.name as string,\n              image:\n                (user.image as string) || \"/placeholder.svg?height=50&width=50\",\n              provider:\n                account?.provider === \"google\"\n                  ? AuthProvider.Google\n                  : AuthProvider.Local,\n            },\n          });\n        } else {\n          // Update the provider if the user signs in with a different method\n          const newProvider =\n            account?.provider === \"google\"\n              ? AuthProvider.Google\n              : AuthProvider.Local;\n\n          if (dbUser.provider !== newProvider) {\n            await prisma.user.update({\n              where: { id: dbUser.id },\n              data: { provider: newProvider },\n            });\n          }\n        }\n\n        // Add user details to the token\n        token = { ...token, id: dbUser.id, role: dbUser.role };\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      return {\n        ...session,\n        user: { ...session.user, id: token.id, role: token.role },\n      };\n    },\n  },\n  secret: env.NEXTAUTH_SECRET,\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAQO,MAAM,cAA2B;IACtC,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,mHAAA,CAAA,MAAG,CAAC,gBAAgB;YAC9B,cAAc,mHAAA,CAAA,MAAG,CAAC,oBAAoB;QACxC;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK;IACpB;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,MAAM;gBACR,gCAAgC;gBAChC,IAAI,SAAS,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,KAAK,KAAK;oBACnB;gBACF;gBAEA,IAAI,CAAC,QAAQ;oBACX,wCAAwC;oBACxC,SAAS,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;wBAChC,MAAM;4BACJ,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;4BACf,OACE,AAAC,KAAK,KAAK,IAAe;4BAC5B,UACE,SAAS,aAAa,WAClB,uDAAA,CAAA,eAAY,CAAC,MAAM,GACnB,uDAAA,CAAA,eAAY,CAAC,KAAK;wBAC1B;oBACF;gBACF,OAAO;oBACL,mEAAmE;oBACnE,MAAM,cACJ,SAAS,aAAa,WAClB,uDAAA,CAAA,eAAY,CAAC,MAAM,GACnB,uDAAA,CAAA,eAAY,CAAC,KAAK;oBAExB,IAAI,OAAO,QAAQ,KAAK,aAAa;wBACnC,MAAM,gIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;4BACvB,OAAO;gCAAE,IAAI,OAAO,EAAE;4BAAC;4BACvB,MAAM;gCAAE,UAAU;4BAAY;wBAChC;oBACF;gBACF;gBAEA,gCAAgC;gBAChC,QAAQ;oBAAE,GAAG,KAAK;oBAAE,IAAI,OAAO,EAAE;oBAAE,MAAM,OAAO,IAAI;gBAAC;YACvD;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBAAE,GAAG,QAAQ,IAAI;oBAAE,IAAI,MAAM,EAAE;oBAAE,MAAM,MAAM,IAAI;gBAAC;YAC1D;QACF;IACF;IACA,QAAQ,mHAAA,CAAA,MAAG,CAAC,eAAe;AAC7B"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/constants.ts"],"sourcesContent":["export const FURNITURE_SERVICE = {\n  name: \"Furniture Resale Prediction\",\n  description: \"Get an accurate resale prediction for your furniture items\",\n  icon: \"🪑\",\n  questionnaire: [\n    {\n      name: \"photo\",\n      label: \"Upload a photo of the furniture\",\n      type: \"file\",\n      required: true,\n    },\n    {\n      name: \"itemType\",\n      label: \"What type of furniture is it?\",\n      type: \"dropdown\",\n      required: true,\n      autoDetectable: true,\n      options: [\n        \"Chair\",\n        \"Table\",\n        \"Sofa\",\n        \"Bed\",\n        \"Dresser\",\n        \"Desk\",\n        \"Bookshelf\",\n        \"Cabinet\",\n        \"Other\",\n      ],\n    },\n    {\n      name: \"material\",\n      label: \"What is the primary material?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\n        \"Wood\",\n        \"Metal\",\n        \"Glass\",\n        \"Plastic\",\n        \"Leather\",\n        \"Fabric\",\n        \"Stone\",\n        \"Composite\",\n        \"Other\",\n      ],\n    },\n    {\n      name: \"age\",\n      label: \"When was the item purchased?\",\n      type: \"date\", // Changed to date for specificity\n      required: true,\n    },\n    {\n      name: \"condition\",\n      label: \"What condition is the item in?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\n        \"Brand New\",\n        \"Excellent\",\n        \"Good\",\n        \"Fair\",\n        \"Poor\",\n        \"Needs Restoration\",\n      ],\n    },\n    {\n      name: \"brand\",\n      label: \"What is the brand or manufacturer (if known)?\",\n      type: \"text\",\n      required: false,\n    },\n    {\n      name: \"original_price\",\n      label: \"Original Purchase Price ($)\",\n      type: \"number\",\n      required: true,\n    },\n    {\n      name: \"planned_resale_year\",\n      label: \"In which year are you planning to sell this item?\",\n      type: \"dropdown\", // Added a new question for planned resale year\n      required: true,\n      options: [\"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"Later\"],\n    },\n    {\n      name: \"description\",\n      label: \"Please provide any additional details about the item\",\n      type: \"textarea\",\n      required: false,\n    },\n  ],\n};\n\nexport const JEWELRY_SERVICE = {\n  name: \"Jewelry Resale Prediction\",\n  description: \"Get accurate resale value predictions for your jewelry items\",\n  icon: \"💍\",\n  questionnaire: [\n    {\n      name: \"photo\",\n      label: \"Upload a photo of the jewelry\",\n      type: \"file\",\n      required: true,\n    },\n    {\n      name: \"jewelry_type\",\n      label: \"What type of jewelry is it?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\"Ring\", \"Necklace\", \"Bracelet\", \"Earrings\", \"Watch\", \"Other\"],\n    },\n    {\n      name: \"brand\",\n      label: \"What is the brand or manufacturer (if known)?\",\n      type: \"text\",\n      required: false,\n    },\n    {\n      name: \"metal_type\",\n      label: \"What is the primary metal type?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\n        \"Gold\",\n        \"Silver\",\n        \"Platinum\",\n        \"White Gold\",\n        \"Rose Gold\",\n        \"Stainless Steel\",\n        \"Other\",\n      ],\n    },\n    {\n      name: \"metal_weight\",\n      label: \"What is the approximate weight of the jewelry (in grams)?\",\n      type: \"number\",\n      required: true,\n    },\n    {\n      name: \"age\",\n      label: \"When was the item purchased?\",\n      type: \"date\",\n      required: true,\n    },\n    {\n      name: \"condition\",\n      label: \"What condition is the item in?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\"Brand New\", \"Excellent\", \"Good\", \"Fair\", \"Poor\"],\n    },\n    {\n      name: \"original_price\",\n      label: \"Original Purchase Price ($)\",\n      type: \"number\",\n      required: true,\n      hint: \"Note: Resale value may depend on the current market price of gold.\",\n    },\n    {\n      name: \"planned_resale_year\",\n      label: \"In which year are you planning to sell this item?\",\n      type: \"dropdown\",\n      required: true,\n      options: [\"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"Later\"],\n    },\n    {\n      name: \"description\",\n      label: \"Please provide any additional details about the item\",\n      type: \"textarea\",\n      required: false,\n    },\n  ],\n};\n\nexport const SERVICES = [FURNITURE_SERVICE, JEWELRY_SERVICE];\n\nexport enum ApplicationEnvironment {\n  DEVELOPMENT = \"development\",\n  PRODUCTION = \"production\",\n}\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,oBAAoB;IAC/B,MAAM;IACN,aAAa;IACb,MAAM;IACN,eAAe;QACb;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,gBAAgB;YAChB,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBAAC;gBAAQ;gBAAQ;gBAAQ;gBAAQ;gBAAQ;gBAAQ;aAAQ;QACpE;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;KACD;AACH;AAEO,MAAM,kBAAkB;IAC7B,MAAM;IACN,aAAa;IACb,MAAM;IACN,eAAe;QACb;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBAAC;gBAAQ;gBAAY;gBAAY;gBAAY;gBAAS;aAAQ;QACzE;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBAAC;gBAAa;gBAAa;gBAAQ;gBAAQ;aAAO;QAC7D;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,MAAM;QACR;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;YACV,SAAS;gBAAC;gBAAQ;gBAAQ;gBAAQ;gBAAQ;gBAAQ;gBAAQ;aAAQ;QACpE;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM;YACN,UAAU;QACZ;KACD;AACH;AAEO,MAAM,WAAW;IAAC;IAAmB;CAAgB;;UAEhD;;;GAAA,2BAAA"}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/config/logger.ts"],"sourcesContent":["import { blue, green, magenta, red, yellow } from \"colorette\";\nimport * as sourceMapSupport from \"source-map-support\";\nimport util from \"util\";\nimport winston, { format, transports } from \"winston\";\nimport { MongoDB, MongoDBTransportInstance } from \"winston-mongodb\";\nimport { ApplicationEnvironment } from \"../constants\";\nimport { env } from \"../env\";\n\n// Linking Trace Support\nsourceMapSupport.install();\n\nconst colorizeLevel = (level: string) => {\n  switch (level) {\n    case \"ERROR\":\n      return red(level);\n    case \"INFO\":\n      return blue(level);\n    case \"WARN\":\n      return yellow(level);\n    default:\n      return level;\n  }\n};\n\nconst consoleLogFormat = format.printf((info) => {\n  const { level, message, timestamp, meta = {} } = info;\n  const customLevel = colorizeLevel(level.toUpperCase());\n  const customTimestamp = green(timestamp as string);\n  const line = \"----------------\";\n  const customMessage = message;\n  const customMeta = util.inspect(meta, {\n    showHidden: false,\n    depth: null,\n    colors: true,\n  });\n  const customLog = `${line}\\n${customLevel} [${customTimestamp}] ${customMessage}\\n${magenta(\"META\")} ${customMeta}\\n${line}`;\n  return customLog;\n});\n\nconst consoleTransport =\n  (): Array<winston.transports.ConsoleTransportInstance> => {\n    if (env.NODE_ENV === ApplicationEnvironment.DEVELOPMENT) {\n      return [\n        new transports.Console({\n          level: \"info\",\n          format: format.combine(format.timestamp(), consoleLogFormat),\n        }),\n      ];\n    }\n    return [];\n  };\n\nconst getCollectionName = (level: string): string => {\n  switch (level) {\n    case \"info\":\n      return \"app-info\";\n    case \"error\":\n      return \"app-error\";\n    case \"warn\":\n      return \"app-warn\";\n    default:\n      return \"app-logs\";\n  }\n};\n\nconst mongodbTransport = (): Array<MongoDBTransportInstance> => {\n  return [\n    new MongoDB({\n      level: \"info\",\n      db: env.DATABASE_URL,\n      metaKey: \"meta\",\n      expireAfterSeconds: 3600 * 24 * 30,\n      collection: getCollectionName(\"info\"),\n    }),\n    new MongoDB({\n      level: \"error\",\n      db: env.DATABASE_URL,\n      metaKey: \"meta\",\n      expireAfterSeconds: 3600 * 24 * 30,\n      collection: getCollectionName(\"error\"),\n    }),\n    new MongoDB({\n      level: \"warn\",\n      db: env.DATABASE_URL,\n      metaKey: \"meta\",\n      expireAfterSeconds: 3600 * 24 * 30,\n      collection: getCollectionName(\"warn\"),\n    }),\n  ];\n};\n\nconst logger = winston.createLogger({\n  level: \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json(),\n  ),\n  defaultMeta: { service: \"predictye-ai\" },\n  transports: [...consoleTransport(), ...mongodbTransport()],\n});\n\nexport default logger;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAQA,wBAAwB;AACxB,uKAAiB,OAAO;AAExB,MAAM,gBAAgB,CAAC;IACrB,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,oIAAA,CAAA,MAAG,AAAD,EAAE;QACb,KAAK;YACH,OAAO,CAAA,GAAA,oIAAA,CAAA,OAAI,AAAD,EAAE;QACd,KAAK;YACH,OAAO,CAAA,GAAA,oIAAA,CAAA,SAAM,AAAD,EAAE;QAChB;YACE,OAAO;IACX;AACF;AAEA,MAAM,mBAAmB,2IAAA,CAAA,SAAM,CAAC,MAAM,CAAC,CAAC;IACtC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,EAAE,GAAG;IACjD,MAAM,cAAc,cAAc,MAAM,WAAW;IACnD,MAAM,kBAAkB,CAAA,GAAA,oIAAA,CAAA,QAAK,AAAD,EAAE;IAC9B,MAAM,OAAO;IACb,MAAM,gBAAgB;IACtB,MAAM,aAAa,uCAAA,CAAA,UAAI,CAAC,OAAO,CAAC,MAAM;QACpC,YAAY;QACZ,OAAO;QACP,QAAQ;IACV;IACA,MAAM,YAAY,CAAC,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,gBAAgB,EAAE,EAAE,cAAc,EAAE,EAAE,CAAA,GAAA,oIAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,CAAC;IAC5H,OAAO;AACT;AAEA,MAAM,mBACJ;IACE,IAAI,mHAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,yHAAA,CAAA,yBAAsB,CAAC,WAAW,EAAE;QACvD,OAAO;YACL,IAAI,2IAAA,CAAA,aAAU,CAAC,OAAO,CAAC;gBACrB,OAAO;gBACP,QAAQ,2IAAA,CAAA,SAAM,CAAC,OAAO,CAAC,2IAAA,CAAA,SAAM,CAAC,SAAS,IAAI;YAC7C;SACD;IACH;IACA,OAAO,EAAE;AACX;AAEF,MAAM,oBAAoB,CAAC;IACzB,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAEA,MAAM,mBAAmB;IACvB,OAAO;QACL,IAAI,iKAAA,CAAA,UAAO,CAAC;YACV,OAAO;YACP,IAAI,mHAAA,CAAA,MAAG,CAAC,YAAY;YACpB,SAAS;YACT,oBAAoB,OAAO,KAAK;YAChC,YAAY,kBAAkB;QAChC;QACA,IAAI,iKAAA,CAAA,UAAO,CAAC;YACV,OAAO;YACP,IAAI,mHAAA,CAAA,MAAG,CAAC,YAAY;YACpB,SAAS;YACT,oBAAoB,OAAO,KAAK;YAChC,YAAY,kBAAkB;QAChC;QACA,IAAI,iKAAA,CAAA,UAAO,CAAC;YACV,OAAO;YACP,IAAI,mHAAA,CAAA,MAAG,CAAC,YAAY;YACpB,SAAS;YACT,oBAAoB,OAAO,KAAK;YAChC,YAAY,kBAAkB;QAChC;KACD;AACH;AAEA,MAAM,SAAS,2IAAA,CAAA,UAAO,CAAC,YAAY,CAAC;IAClC,OAAO;IACP,QAAQ,2IAAA,CAAA,UAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,2IAAA,CAAA,UAAO,CAAC,MAAM,CAAC,SAAS,IACxB,2IAAA,CAAA,UAAO,CAAC,MAAM,CAAC,IAAI;IAErB,aAAa;QAAE,SAAS;IAAe;IACvC,YAAY;WAAI;WAAuB;KAAmB;AAC5D;uCAEe"}},
    {"offset": {"line": 525, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/helpers/errors/server.ts"],"sourcesContent":["import logger from \"@/lib/config/logger\";\nimport { ApplicationEnvironment } from \"@/lib/constants\";\nimport { env } from \"@/lib/env\";\nimport { NextResponse } from \"next/server\";\n\nconst ServerSideErrorHandler = (error: unknown): NextResponse => {\n  // Log the error for debugging purposes\n  if (env.NODE_ENV === ApplicationEnvironment.DEVELOPMENT) {\n    console.log(\"Server-side error:\", error);\n  } else {\n    logger.error(error);\n  }\n\n  if (error instanceof Error && error.message.includes(\"prisma\")) {\n    // Handle Prisma-related errors\n    const prismaError = error as any; // Cast to any to access meta fields if available\n    return NextResponse.json(\n      {\n        success: false,\n        message: \"Database Error\",\n        trace:\n          env.NODE_ENV === ApplicationEnvironment.DEVELOPMENT\n            ? prismaError.stack\n            : null,\n      },\n      { status: 400 }, // Bad Request for Prisma errors\n    );\n  }\n\n  if (error instanceof Error) {\n    // Handle other types of Error objects\n    return NextResponse.json(\n      {\n        success: false,\n        message: error.message || \"An unexpected error occurred\",\n      },\n      { status: 500 },\n    );\n  } else if (typeof error === \"string\") {\n    // Handle simple string errors\n    return NextResponse.json(\n      {\n        success: false,\n        message: error,\n      },\n      { status: 500 },\n    );\n  } else {\n    // Fallback for any other types of errors\n    return NextResponse.json(\n      {\n        success: false,\n        message: \"An unexpected error occurred\",\n      },\n      { status: 500 },\n    );\n  }\n};\n\nexport default ServerSideErrorHandler;\n"],"names":[],"mappings":";;;;;;;;;;;;AAKA,MAAM,yBAAyB,CAAC;IAC9B,uCAAuC;IACvC,IAAI,mHAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,yHAAA,CAAA,yBAAsB,CAAC,WAAW,EAAE;QACvD,QAAQ,GAAG,CAAC,sBAAsB;IACpC,OAAO;QACL,gIAAA,CAAA,UAAM,CAAC,KAAK,CAAC;IACf;IAEA,IAAI,iBAAiB,SAAS,MAAM,OAAO,CAAC,QAAQ,CAAC,WAAW;QAC9D,+BAA+B;QAC/B,MAAM,cAAc,OAAc,iDAAiD;QACnF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;YACT,OACE,mHAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,yHAAA,CAAA,yBAAsB,CAAC,WAAW,GAC/C,YAAY,KAAK,GACjB;QACR,GACA;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI,iBAAiB,OAAO;QAC1B,sCAAsC;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS,MAAM,OAAO,IAAI;QAC5B,GACA;YAAE,QAAQ;QAAI;IAElB,OAAO,IAAI,OAAO,UAAU,UAAU;QACpC,8BAA8B;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB,OAAO;QACL,yCAAyC;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;uCAEe"}},
    {"offset": {"line": 587, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 592, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/predict/route.ts"],"sourcesContent":["import prisma from \"@/lib/config/prisma\"; // Ensure Prisma is imported\nimport { authOptions } from \"@/lib/helpers/auth-options\";\nimport ServerSideErrorHandler from \"@/lib/helpers/errors/server\";\nimport axios from \"axios\";\nimport { getServerSession } from \"next-auth\";\nimport { NextResponse } from \"next/server\";\n\nexport async function POST(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    const userId = session?.user?.id;\n\n    const { images, chatId, blockId } = await request.json();\n\n    // Validate user authorization for the chat\n    const chat = await prisma.chat.findUnique({\n      where: { id: chatId },\n      include: {\n        service: true,\n        blocks: {\n          where: {\n            id: blockId,\n          },\n          include: {\n            messages: {\n              include: {\n                fileData: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    if (!chat || chat.userId !== userId) {\n      return NextResponse.json(\n        { success: false, error: \"Unauthorized access\" },\n        { status: 403 },\n      );\n    }\n\n    // Initialize variables for jewelry-specific data\n    let materialType = \"Gold\"; // Default to Gold\n    let weight = 0; // Default weight\n\n    // Check if the service name contains \"jewelry\" (case-insensitive)\n    if (chat.service?.name?.toLowerCase().includes(\"jewelry\")) {\n      // Extract material type and weight from user inputs in the specific block\n      const targetBlock = chat.blocks.find((block) => block.id === blockId);\n\n      if (targetBlock) {\n        // Extract material type\n        const materialMessage = targetBlock.messages.find(\n          (message) =>\n            message.role === \"user\" &&\n            [\n              \"Gold\",\n              \"Silver\",\n              \"Platinum\",\n              \"White Gold\",\n              \"Rose Gold\",\n              \"Stainless Steel\",\n              \"Other\",\n            ].some((type) =>\n              message.content.toLowerCase().includes(type.toLowerCase()),\n            ),\n        );\n        materialType = materialMessage?.content || \"Gold\";\n\n        // Extract weight\n        const weightMessageIndex = targetBlock.messages.findIndex(\n          (message) =>\n            message.role === \"assistant\" &&\n            message.content.toLowerCase().includes(\"gram\"),\n        );\n\n        if (\n          weightMessageIndex !== -1 &&\n          targetBlock.messages[weightMessageIndex + 1]\n        ) {\n          const nextMessage = targetBlock.messages[weightMessageIndex + 1];\n          const weightInput = nextMessage.content.match(/\\d+/)?.[0] || \"0\";\n          weight = parseFloat(weightInput) || 0;\n        }\n\n        console.log(\"Material Type:\", materialType);\n        console.log(\"Weight:\", weight);\n      }\n    }\n\n    // Prepare prompt with context and images\n    let prompt =\n      \"Please predict the resale value for this item based on the following details in conversation format:\\n\\n\";\n\n    let image = null;\n\n    // Add context (messages) to the prompt\n    chat.blocks[0].messages.forEach((message) => {\n      prompt += `${message.role}: ${message.content}\\n`;\n      if (message.fileData && message.fileData.url) {\n        prompt += `File: ${message.fileData.url}\\n`;\n        image = message.fileData.url;\n      }\n    });\n\n    // Add jewelry-specific details to the prompt if applicable\n    if (chat.service?.name?.toLowerCase().includes(\"jewelry\")) {\n      prompt += `\n      Material Type: ${materialType}\n      Weight: ${weight} grams\n\n      Important Notes:\n      1. Jewelry is often considered an appreciating asset, with its resale value influenced by factors such as material type, weight, and market trends.\n      2. Determine the current market price of ${materialType} per gram for the given year.\n      3. Analyze historical data to estimate the annual percentage increase in the price of ${materialType}.\n      4. Calculate the estimated resale value based on the provided weight, current market price, and projected annual price increase.\n\n      Please use reliable market data and your expertise to provide an accurate resale value prediction. Include a clear explanation of your calculations and assumptions, considering factors like material demand, economic conditions, and historical trends.\n      `;\n    }\n\n    // Add image URLs if available\n    if (images && images.length > 0) {\n      prompt += \"\\nImages:\\n\";\n      images.forEach((image: string) => {\n        prompt += `${image}\\n`;\n      });\n    }\n\n    // Generate prediction using Gemini API\n    const response = await axios.post(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,\n      {\n        contents: [\n          {\n            parts: [{ text: prompt }],\n          },\n        ],\n        systemInstruction: {\n          parts: [\n            {\n              text: `You are an AI assistant that specializes in predicting resale values for furniture and jewelry. Analyze the provided details and images to give an accurate resale value prediction and ignore vague conversations in the prompt mentioning errors in past cycles. Provide a price range and explain your reasoning based on factors like brand, condition, age, and market trends. Format your response in a clear, professional manner wherein the predicted price is mentioned on the top (properly highlighted). Ensure that the JSON object at the end of your response adheres to the following structure and formatting:\n          \n          {\n          \"chat_name\": \"Resale Value Prediction\", // Provide a relevant chat name based on the product details\n          \"estimated_price\": \"$10000\", // Always include a dollar sign and ensure consistency in formatting\n          \"price_variation\": [\"$8000\", \"$12000\"], // Provide a range with two values, both formatted with a dollar sign\n          \"resale_in_year\": { \"2024\": \"$9500\", \"2025\": \"$9000\", \"2026\": \"$8500\" }, // Include year as key and price as value, formatted with a dollar sign, while year goes upto minimum 2026 if not provided in the context in form of (planned_resale_year + 1)\n          \"user_inputs\": { ... } // Reflect the user-provided inputs in a structured format\n          }\n          \n          Make sure the JSON is valid and properly formatted. Avoid any ambiguity or missing fields.`,\n            },\n          ],\n        },\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      },\n    );\n\n    // Extract the prediction text from the response\n    const predictionText = response.data.candidates[0].content.parts[0].text;\n\n    // Extract JSON from the prediction\n    const jsonStartIndex = predictionText.indexOf(\"{\");\n    const jsonEndIndex = predictionText.lastIndexOf(\"}\");\n    let predictionJson = null;\n\n    if (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n      const jsonString = predictionText.slice(jsonStartIndex, jsonEndIndex + 1);\n      try {\n        predictionJson = JSON.parse(jsonString);\n      } catch (error) {\n        console.error(\"Error parsing JSON from prediction:\", error);\n        predictionJson = { error: \"Invalid JSON format in prediction\" }; // Fallback JSON structure\n      }\n    } else {\n      console.error(\"No valid JSON found in prediction text\");\n      predictionJson = { error: \"No JSON found in prediction\" }; // Fallback JSON structure\n    }\n\n    // Ensure the response structure is consistent\n    const structuredResponse = {\n      success: true,\n      prediction: {\n        text: predictionText.split(\"```json\")?.[0] || \"\", // Text without JSON\n        json: { ...predictionJson, chatId, blockId, image: image || images[0] }, // Include chat and block IDs\n      },\n    };\n\n    // Update the block's prediction field in the database\n    await prisma.block.update({\n      where: { id: blockId },\n      data: {\n        prediction: structuredResponse.prediction.json,\n      },\n    });\n\n    if (\n      chat.title === \"New Chat\" &&\n      structuredResponse.prediction.json?.chat_name\n    ) {\n      await prisma.chat.update({\n        where: { id: chatId },\n        data: {\n          title: structuredResponse.prediction.json.chat_name,\n        },\n      });\n    }\n\n    return NextResponse.json(structuredResponse);\n  } catch (error) {\n    return ServerSideErrorHandler(error);\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 797, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}